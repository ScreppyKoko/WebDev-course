//  ==================================================
//  ===  как фукнкции обращаются к переменным пример 1
//  ==================================================
let a = 10;

function f1() {
    console.log('a(global)= ' + a);
}

// f1();  // a - global 10

//  ==================================================
//  ===  как фукнкции обращаются к переменным пример 2
//  ==================================================

function f2() {
    let a = 9; // обращаться к данной переменной можно только внутри функции
    console.log('a(local)= ' + a);
}

//f2();  // a(local)= 9
// console.log(a);

//  ==================================================
//  ===  иногда значения нельзя разместить только внутри
//  ==================================================

// let count = 0;
// function step() {
//     count++;
//     console.log(count);
// }
// step();
// step();
// step();

//  ==================================================
//  ===  а давайте ка обернем это все функцией (замыкания)
// === kloyжee
//  ==================================================
(
    function () {
        let count = 0;
        function step() {
            count++;
            console.log(count);
        }
    }
)();
// step(); // вызовет ошибку

//  ==================================================
//  === сделаем более удобным (замыкания)
//  ==================================================
function createStep() {
    let count = 0;
    return function () {
        count++;
        console.log(count);
    }
}

// let step1 = createStep(); // function
// let step2 = createStep(); // function
// step1();
// step1();
// step1();
// step1();
// step2();
// step2();
// step1(); // в инспекторе

//  ==================================================
//  === сделаем еще более удобным (замыкания)
//  ==================================================
function createStep2(n = 0) {
    let count = n;
    return function () {
        count++;
        console.log(count);
        // return count;
    }
}

let step3 = createStep2(10);
step3();

//  ==================================================
//  === Замыкание ( закрытие, сокрытие, скрытие )
//  === возможность закрыть и использовать переменные в каком-то блоке видимости
//  === защищать данные
//  === не гадить в коде
//  ==================================================


//  ==================================================
//  === Задача на попрошайку, с рекурсией
//  ==================================================

function randomInteger(min, max) {
    // получить случайное число от (min-0.5) до (max+0.5)
    let rand = min - 0.5 + Math.random() * (max - min + 1);
    return Math.round(rand);
}

// бегга
function createBeggar() {
    let s = 0;
    return function beggar() {
        s += randomInteger(0, 100);
        console.log(s);
        if (s >= 250) return;
        beggar();
    }
}

// let begg1 = createBeggar();
// begg1();
// console.log('======================');
// let begg2 = createBeggar();
// begg2();



//  ==================================================
//  === Задача создания валидаторов 
//  ==================================================

let p;